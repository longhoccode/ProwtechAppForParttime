{"ast":null,"code":"var _jsxFileName = \"E:\\\\5.FILE LINH TINH\\\\CODESPACE\\\\prowtech-app\\\\frontend-web\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useMemo } from \"react\";\nimport { loginService, logoutService } from \"../services/authService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  // Trạng thái user chỉ chứa thông tin chi tiết (không chứa token)\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // ✅ Load user details & check for tokens khi refresh\n  useEffect(() => {\n    // Chúng ta không cần gắn token vào axios ở đây vì Request Interceptor trong api.js đã xử lý\n    // việc lấy token từ localStorage. Chúng ta chỉ cần lấy chi tiết user.\n    const storedUser = localStorage.getItem(\"user_details\");\n    const token = localStorage.getItem(\"token\"); // Kiểm tra sự tồn tại của token\n\n    if (storedUser && token) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n      } catch (error) {\n        // Xảy ra lỗi khi parse user details (ví dụ: dữ liệu bị lỗi)\n        console.error(\"Error parsing user details from localStorage:\", error);\n        logout(); // Đăng xuất để làm sạch localStorage\n      }\n    } else {\n      // Nếu thiếu token hoặc user details, đảm bảo localStorage sạch sẽ\n      if (storedUser || token) {\n        logout();\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // ✅ Đăng nhập\n  const login = async (email, password) => {\n    // loginService sẽ gọi API và tự động lưu \"token\" và \"refreshToken\" vào localStorage\n    const {\n      user: userData\n    } = await loginService({\n      email,\n      password\n    });\n\n    // Cập nhật state và lưu chi tiết user vào localStorage riêng\n    setUser(userData);\n    localStorage.setItem(\"user_details\", JSON.stringify(userData));\n    return userData;\n  };\n\n  // ✅ Đăng xuất\n  const logout = () => {\n    setUser(null);\n    // Xóa tất cả các key liên quan đến Auth\n    localStorage.removeItem(\"user_details\"); // Key mới để lưu chi tiết user\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"refreshToken\");\n\n    // Gọi service để xử lý invalidate token trên backend (nếu có)\n    logoutService();\n\n    // Không cần xóa header Authorization ở đây, vì Interceptor sẽ thấy token bị mất\n    // và sẽ không gắn vào request nữa.\n  };\n  const contextValue = useMemo(() => ({\n    user,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!user && !!localStorage.getItem(\"token\") // Kiểm tra cả state và token trong storage\n  }), [user, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n// ✅ custom hook để dùng auth nhanh gọn\n_s(AuthProvider, \"jP6h1ytT8fpih4XTRGm7Kl1clR0=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useMemo","loginService","logoutService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","storedUser","localStorage","getItem","token","parsedUser","JSON","parse","error","console","logout","login","email","password","userData","setItem","stringify","removeItem","contextValue","isAuthenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["E:/5.FILE LINH TINH/CODESPACE/prowtech-app/frontend-web/src/context/AuthContext.js"],"sourcesContent":["\r\nimport React, { createContext, useContext, useState, useEffect, useMemo } from \"react\";\r\nimport { loginService, logoutService } from \"../services/authService\"; \r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  // Trạng thái user chỉ chứa thông tin chi tiết (không chứa token)\r\n  const [user, setUser] = useState(null); \r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // ✅ Load user details & check for tokens khi refresh\r\n  useEffect(() => {\r\n    // Chúng ta không cần gắn token vào axios ở đây vì Request Interceptor trong api.js đã xử lý\r\n    // việc lấy token từ localStorage. Chúng ta chỉ cần lấy chi tiết user.\r\n    const storedUser = localStorage.getItem(\"user_details\");\r\n    const token = localStorage.getItem(\"token\"); // Kiểm tra sự tồn tại của token\r\n    \r\n    if (storedUser && token) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setUser(parsedUser);\r\n      } catch (error) {\r\n        // Xảy ra lỗi khi parse user details (ví dụ: dữ liệu bị lỗi)\r\n        console.error(\"Error parsing user details from localStorage:\", error);\r\n        logout(); // Đăng xuất để làm sạch localStorage\r\n      }\r\n    } else {\r\n        // Nếu thiếu token hoặc user details, đảm bảo localStorage sạch sẽ\r\n        if (storedUser || token) {\r\n            logout(); \r\n        }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // ✅ Đăng nhập\r\n  const login = async (email, password) => {\r\n    // loginService sẽ gọi API và tự động lưu \"token\" và \"refreshToken\" vào localStorage\r\n    const { user: userData } = await loginService({ email, password }); \r\n\r\n    // Cập nhật state và lưu chi tiết user vào localStorage riêng\r\n    setUser(userData);\r\n    localStorage.setItem(\"user_details\", JSON.stringify(userData));\r\n\r\n    return userData;\r\n  };\r\n\r\n  // ✅ Đăng xuất\r\n  const logout = () => {\r\n    setUser(null);\r\n    // Xóa tất cả các key liên quan đến Auth\r\n    localStorage.removeItem(\"user_details\"); // Key mới để lưu chi tiết user\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n\r\n    // Gọi service để xử lý invalidate token trên backend (nếu có)\r\n    logoutService(); \r\n\r\n    // Không cần xóa header Authorization ở đây, vì Interceptor sẽ thấy token bị mất\r\n    // và sẽ không gắn vào request nữa.\r\n  };\r\n\r\n  const contextValue = useMemo(() => ({\r\n    user, \r\n    login, \r\n    logout, \r\n    loading,\r\n    isAuthenticated: !!user && !!localStorage.getItem(\"token\"), // Kiểm tra cả state và token trong storage\r\n  }), [user, loading]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// ✅ custom hook để dùng auth nhanh gọn\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}